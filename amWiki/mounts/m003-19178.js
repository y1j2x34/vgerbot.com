if(typeof AWPageMounts=='undefined'){AWPageMounts={}};AWPageMounts['m003']=[{"name":"001-Mysql Sharding.md","path":"003-数据库/001-MySQL/001-Mysql Sharding.md","content":"# Sharding\r\n\r\n## 概念\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;Sharding,译作分片，MySQL5以后提供了分片能力，目的就是为突破单点数据服务器I/O能力限制，解决数据库Scale Out水平扩展的问题。通过Sharding可以将数据按照物理位置贴合用户分步，得到更加快速的响应；Sharding将数据分块，更小的数据集操作汇总能狗得到更佳的体验；分片使得数据分摊在各个数据节点，对其操作实现负债均衡。\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;Sharding按方向可以分为两类：垂直分区和水平分区，按模式可以分为两大类：静态分片模式和动态分片模式。\r\n\r\n### 垂直分区\r\n以表为单位，把不同表分散到不同的数据库或主机上。特点是规则简单，实施方便，适合业务之间耦合度低的系统。\r\n### 水平分区\r\n以行为单位，将同一个表中的数据按某种条件拆分到不同的数据库或主机上。特点是相对复杂，适合单表巨大的系统。\r\n\r\n### 静态分片模式\r\n分区键是静态分配的，一般使用范围或哈希函数，例如：深圳团队放到一个分片，北京团队放到另外一个分片，或者编号为0096开头的员工放到一个分片，而0199开头的员工放到另外一个分片。这种模式实现简单，但明显的缺陷便是存在数据不均匀的情况。\r\n### 动态分片模式\r\n分区函数将从字典中查找分区键，然后定位具体哪个分片存储了数据。这种模式更加灵活，但需要一个集中存储来存放质点，每次查找数据都需要执行两次查询，并且集中存储本身还可能存在单点故障。\r\n\r\n### 分区类型\r\n1. RANGE分区\r\n\r\n    基于属于一个给定连续区间的列值，把多行分配给分区\r\n1. LIST分区\r\n\r\n    类似于按RANGE分区，区别在于LIST分区是基于列值匹配一个离散值集合中的某个值来进行选择\r\n1. HASH分区\r\n\r\n    基于用户定义的表达式的返回值来进行选择的分区，改表达式使用将要插入到表中的这些行的列值进行计算\r\n1. KEY分区\r\n\r\n    类似于按HASH分区，区别在于KEY分区只支持计算一列或多列，且MySQL服务器提供其自身的哈希函数，必须有一列或多列包含整数值。\r\n\r\n## 相关资料\r\n#### Scale Out\r\n> 横向扩展，字面意思来看是靠增加处理器来提升运算能力和增加独立服务器来增加运算能力。指企业可以根据需求增加不同的服务器和存储应用，依靠多部服务器、存储协同运算，借负载均衡及容错等功能来提高运算能力及可靠性\r\n\r\n\r\n#### Scale Up\r\n> 纵向扩展，指企业后端大型服务器以增加处理器等运算资源进行能力升级以获得对应用性能的要求，但更大更强的服务器同时也是更昂贵的，往往成本会大于部署大量相对便宜的服务器来实现性能的提升，而且服务器性能所能提升的程度也有一定的上限。。\r\n","timestamp":1524798865268},{"name":"001-时序数据库.md","path":"003-数据库/003-InfluxDB/001-介绍/001-时序数据库.md","content":"# 时序数据库\r\n\r\n## 概述\r\n\r\n时序数据库（Time Series Database, 简称TSDB）是用于管理时间序列数据的专业化数据库， 区别与传统的关系型数据库， 时序数据库针对时间序列数据的存储、查询和展现进行了专门的优化， 从而获得极高的数据压缩能力、极优的查询性能，特别适用于需要处理海量时间序列数据的场景。\r\n\r\n### 什么是时间序列数据（以下称时序数据）\r\n是指在不同时间点上收集到的数据， 反映了某一事物、现象等随时间的变化状态或程度。\r\n时序数据的典型特点是：产生频率快、严重依赖于采集时间（每条数据均要求对应唯一的时间）、测点多信息量大（常规的实时检测系统均有成千上万的监测点、每秒都在产生数据）\r\n\r\n基于时序数据的特点，关系型数据库无法满足对时序数据的有效存储与处理，因此需要一种针对时序数据优化的数据库，即时序数据库。\r\n\r\n\r\n#### 时序数据：\r\n![cpu useage](/amWiki/images/tsd/cpu-useage.png)\r\n\r\n#### 规则时序数据与不规则时序\r\n![regular vs irregular](/amWiki/images/tsd/regular_irregular.png)\r\n#### 非时序数据：\r\n![郭靖](/amWiki/images/tsd/rtv.png)\r\n\r\n### 时序数据举例\r\n1. CPU监控数据\r\n1. 程序异常\r\n1. 用户访问量\r\n1. 用户操作记录\r\n1. CDN带宽数据\r\n1. SVN提交记录\r\n1. 等等所有与时间相关的数据\r\n\r\n## 几个时序数据库介绍\r\n\r\n### RRDTool\r\n\r\n| &nbsp; | &nbsp; |\r\n|:--|:--|\r\n|主页|(http://oss.oetiker.ch/rrdtool/index.en.html)[http://oss.oetiker.ch/rrdtool/index.en.html]|\r\n|编写语言|C语言|\r\n|License|GNU GPL V2|\r\n|项目创建时间|1999-07-16|\r\n|活跃度|活跃|\r\n|文档|详细|\r\n\r\nRRDtool全称为Round Robin Database Tool，也就是用于操作RRD的工具。\r\n\r\n什么是RRD呢？简单来说它就是一个循环使用的固定大小的数据库文件（其实也不太像典型的数据库）。\r\n\r\n大体来说，RRDtool提供的主要工具如下：\r\n\r\n- 创建RRD（rrdtool create）\r\n- 更新RRD（rrdtool update）\r\n- 画图（rrdtool graph）\r\n这其中，画图功能是最复杂也是最强大的，甚至支持下面这些图形，这是其他TSDB中少见的：\r\n\r\n- 指标比较，对两个指标值进行计算，描画出满足条件的区域\r\n- 移动平均线\r\n- 和历史数据进行对比\r\n- 基于最小二乘法的线性预测\r\n- 曲线预测\r\n\r\n2. Graphite\r\n\r\n| &nbsp; | &nbsp; |\r\n|:--|:--|\r\n|主页|(http://graphite.readthedocs.org/en/latest/)[http://graphite.readthedocs.org/en/latest/]|\r\n|编写语言|Python|\r\n|License|Apache 2.0|\r\n|项目创建时间|2006|\r\n|活跃度|活跃|\r\n|文档|详细|\r\n\r\n主要有两个功能：\r\n\r\n- 存储数值型时序列数据\r\n- 根据请求对数据进行可视化（画图）\r\n\r\n特点：\r\n- 分布式时序列数据存储，容易扩展\r\n- 功能强大的画图Web API，提供了大量的函数和输出方式\r\n\r\n\r\n3. OpenTSDB\r\n\r\n| - | - |\r\n|:--|:--|\r\n|主页|(http://opentsdb.net/)[http://opentsdb.net/]|\r\n|编写语言|Java|\r\n|License|LGPLv2.1+ GPLv3+|\r\n|项目创建时间|2010|\r\n|活跃度|活跃|\r\n|文档|详细|\r\n\r\nOpenTSDB是一个分布式、可伸缩的时间序列数据库。它支持豪秒级数据采集所有metrics，支持永久存储（不需要downsampling），和InfluxDB类似，它也是无模式，以tag来实现维度的概念。\r\n\r\nOpenTSDB的节点称为TSD（Time Series Daemon (TSD)），它没有主、从之分，消除了单点隐患，非常容易扩展。它主要以HBase作为存储系统，现在也增加了对Cassandra和Bigtable（非云端）。\r\n\r\nOpenTSDB以数据存储和查询为主，附带了一个简单地图形界面（依赖Gnuplot），共开发、调试使用。\r\n\r\n4. InfluxDB\r\n\r\n|-|-|\r\n|:--|:--|\r\n|主页|\thttps://influxdata.com/\r\n|编写语言|Golang|\r\n|License|MIT|\r\n|项目创建时间|2013|\r\n|活跃度|活跃|\r\n|文档|详细|\r\n\r\n\r\nInfluxDB由Golang语言编写，也是由Golang编写的软件中比较著名的一个，在很多Golang的沙龙或者文章中可能都会把InfluxDB当标杆来介绍，这也间接帮助InfluxDB提高了知名度。\r\n\r\nInfluxDB的主要特点包括下面这些：\r\n\r\n- schemaless(无结构)，可以是任意数量的列\r\n- 可扩展（集群）\r\n- 方便、强大的查询语言\r\n- Native HTTP API\r\n- 集成了数据采集、存储、可视化功能\r\n- 实时数据Downsampling\r\n- 高效存储，使用高压缩比算法，支持retention polices\r\n- InfluxDB是TSDB中为数不多的进行了用户和角色方面实现的，提供了Cluster Admin、Database Admin和Database User三种角色。\r\n\r\nInfluxDB的数据采集系统也支持多种协议和插件：\r\n\r\n- 行文本\r\n- UDP\r\n- Graphite\r\n- CollectD\r\n- OpenTSDB\r\n\r\n不过InfluxDB每次变动都较大，尤其是在存储和集群方面，追求平平安过日子，不想瞎折腾的可以考虑下。\r\n\r\n\r\n\r\n> [最新时序数据库排行榜](https://db-engines.com/en/ranking/time+series+dbms)\r\n","timestamp":1524798865268},{"name":"002-安装.md","path":"003-数据库/003-InfluxDB/001-介绍/002-安装.md","content":"\r\n## 安装\r\n\r\n### CentOS\r\n使用`yum`安装：\r\n1. 添加仓库地址\r\n\r\n    ```shell\r\n    cat <<EOF | sudo tee /etc/yum.repos.d/influxdb.repo\r\n    [influxdb]\r\n    name = InfluxDB Repository - RHEL \\$releasever\r\n    baseurl = https://repos.influxdata.com/rhel/\\$releasever/\\$basearch/stable\r\n    enabled = 1\r\n    gpgcheck = 1\r\n    gpgkey = https://repos.influxdata.com/influxdb.key\r\n    EOF\r\n    ```\r\n\r\n1. 安装\r\n    ```shell\r\n    sudo yum install influxdb\r\n    ```\r\n1. 启动\r\n    ```shell\r\n    sudo service influxdb start\r\n    ```\r\n    `CentOS7+`版本系统\r\n    ```\r\n    sudo systemctrl start influxdb\r\n    ```\r\n### 默认端口作用\r\n\r\n- `8083` web管理界面\r\n- `8086` HTTP API接口\r\n- `8088` 提供给RPC服务做备份还原\r\ninfluxdb.conf文件中可以修改默认端口\r\n\r\n## 使用\r\n在命令行输入influx就可以开始管理数据库了\r\n\r\n### 查看数据库\r\n```shell\r\nD:\\work\\software\\influxdb-1.2.2-1>influx\r\nConnected to http://localhost:8086 version 1.2.2\r\nInfluxDB shell version: 1.2.2\r\n> show databases\r\nname: databases\r\nname\r\n----\r\n_internal\r\nkpy_cdn\r\n\r\n>\r\n```\r\n### 创建数据库\r\n```shell\r\n> create database my_database\r\n>\r\n```\r\n### 使用数据库\r\n```shell\r\n> use my_database\r\nUsing database my_database\r\n>\r\n```\r\n### 退出\r\n```shell\r\n> exit\r\nD:\\work\\software\\influxdb-1.2.2-1>\r\n```\r\n","timestamp":1524798865268},{"name":"003-概念解释.md","path":"003-数据库/003-InfluxDB/001-介绍/003-概念解释.md","content":"# InfluxDB 核心概念\r\n\r\n## 场景定义\r\n在数据库`my_database`中有一张表记录了两位科学家（langstroth 和 perpetua）在两个地点（1 和 2）\r\n采集到的蝴蝶和蜜蜂数量的数据（2015-08-19T00:00:00Z到2015-08-19T06:12:00Z）：\r\n\r\n```\r\nname: census\r\n-————————————\r\ntime                      butterflies           honeybees           location            scientist\r\n2015-08-18T00:00:00Z      12                    23                    1                 langstroth\r\n2015-08-18T00:00:00Z      1                     30                    1                 perpetua\r\n2015-08-18T00:06:00Z      11                    28                    1                 langstroth\r\n2015-08-18T00:06:00Z      3                     28                    1                 perpetua\r\n2015-08-18T05:54:00Z      2                     11                    2                 langstroth\r\n2015-08-18T06:00:00Z      1                     10                    2                 langstroth\r\n2015-08-18T06:06:00Z      8                     23                    2                 perpetua\r\n2015-08-18T06:12:00Z      7                     22                    2                 perpetua\r\n```\r\n### 说明\r\n第一列time记录存储时间戳信息，上面看到的时间是以Internet标准时间[RFC3339](https://www.ietf.org/rfc/rfc3339.txt)格式显示出来的，0时区。\r\n\r\ntime后面的两列`butterflies`和`honeybees`, 叫`field`，是各种记录值，没有索引，这里表示蝴蝶和蜜蜂的数量\r\n\r\n最后两列`location`和`scientist`两个叫`tag`，有索引， 分别记录了地区和科学家名称， tag通常作为查询条件来查询信息。\r\n\r\n### 解释：\r\n- measurement, 相当于关系数据库中的table, 是tag, field, time的容器，上面这张表的名称就叫做 census, measurement不需要事先定义好结构，measurement, tags和fields都可以随意添加\r\n\r\n- timestamp: 表的第一列字段time,\r\n- field key: butterflies,honeybees\r\n- field value: 12,         23\r\n- tag key : location, scientist\r\n- tag value: 1,        langstroth\r\n- series: 上面这张表就有这四个series\r\n\r\n    |Arbitrary series number| Retention policy| measurement| tag set|\r\n    |:--|:--|:--|:--|\r\n    |series 1| autogen | census| location = 1, scientist = langstroth|\r\n    |series 2| autogen | census| location = 2, scientist = langstroth|\r\n    |series 3| autogen | census| location = 1, scientist = perpetua|\r\n    |series 4| autogen | census| location = 2, scientist = perpetua|\r\n 一个series其实就是 retention policy, measurement, tagset共同组成唯一标识的一段时间序列数据，也就是在图标上的一条线\r\n- point: 某个series的同一个时刻的多个field的value组成了一个point,也就是线上的一个点\r\n\r\n### 数据类型\r\n\r\nfield值可以存储为`string`、`float64`、`int64`或`boolean`,所有随后的field值的类型必须与第一个点的数据一致。\r\n\r\n- `string`\r\n    长度限制为64KB，支持所有Unicode字符。\r\n\r\n- `float64`\r\n    float64是默认的数字类型。比如`8`是一个浮点型，`8i`是整数\r\n- `int64`\r\n    整数的末尾必须加`i`来标识，比如`bikes_present=15i`存储整数而`bike_present=15`存储浮点。\r\n- `boolean`\r\n    true的字面量可以写为`t`,`T`,`true`,`True`或者`TRUE`；\r\n    false字面量可以谢伟`f`,`F`,`false`,`False`或者`FALSE`。\r\n\r\n### 特殊字符\r\n以下几个字符串在tag key, tag value, field key这些场景下使用时是要反斜杠`\\`来转义：\r\n- 逗号 `,`\r\n- 等号 `=`\r\n- 空格 ` `\r\n\r\nmeasurement名字中需要反斜杠转义的字符：\r\n- 逗号 `,`\r\n- 空格 ` `\r\n\r\nfield value需要转义的字符：\r\n- 双引号 `\"`\r\n\r\n示例\r\n```sql\r\nINSERT \"measurement\\ with\\ quo⚡️es\\ and\\ emoji\",tag\\ key\\ with\\ sp🚀ces=tag\\,value\\,with\"commas\" field_k\\ey=\"string field value, only \\\" need be esc🍭ped\"\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","timestamp":1524798865268},{"name":"001-CURD.md","path":"003-数据库/003-InfluxDB/002-基本操作/001-CURD.md","content":"# CURD\r\n\r\n## 插入\r\n\r\n语法\r\n```sql\r\ninsert <measurement name>[,tag_key1=tag_value1,...] field_key=field_value[,field_key2=field_value2,...] [timestamp]\r\n```\r\n\r\n### 示例\r\n1.\r\n```sql\r\ninsert census,location=1,scientist=langstroth butterflies=12,honeybees=23 1234567890000000000\r\n```\r\n1. 正确的写法\r\n```sql\r\ninsert measurement field_value=12\r\ninsert measurement field_value=12 1439587925\r\ninsert measurement,tag_key=tag_value field_value=12\r\ninsert measurement,tag_key=tag_value field_value=12 1439587925\r\ninsert measurement,tag_key=tag_value field_value=12,other_field=14 1439587925\r\n```\r\n1. 错误写法\r\n```sql\r\ninsert measurement,value=12\r\ninsert measurement value=12,1439587925\r\ninsert measurement foo=bar value=12\r\ninsert measurement,foo=bar,value=12 1439587925\r\ninsert measurement,foo=bar\r\ninsert measurement,foo=bar 1439587925\r\n```\r\n\r\n时间戳不传时默认为当前服务器本地时间，单位为纳秒.\r\n\r\n## 查询\r\n\r\n### 基本语法:\r\n1. `select *`\r\n    查询返回所有field和tag的内容\r\n1. `selecy \"<field_key>\"`\r\n    查询返回指定的field内容\r\n1. `select \"<field_key>\",\"<field_key>\"`\r\n    查询返回多个field内容\r\n1. `select \"<field_key>\",\"<tag_key>\"`\r\n    查询返回指定的field和tag内容\r\n1. `select \"<field_key>\"::field,\"<tag_key>\"::tag`\r\n    查询返回指定的field,tag内容，`::field`,`::tag`语法是在field, tag重名的情况下使用，\r\n\r\n### 在查询语句中使用数学运算\r\n运算符优先级和标准的数学运算符优先级一致，括号拥有最高优先级。\r\n#### 加法运算\r\n1. 查询字段A+5的和\r\n    ```sql\r\n    select \"A\" + 5 from \"add\"\r\n    ```\r\n1. 相当于查询 A > 5的行\r\n    ```sql\r\n    select * from \"add\" WHERE \"A\" + 5 > 10\r\n    ```\r\n1. 查询 A列和B列的和\r\n    ```sql\r\n    select \"A\" + \"B\" from \"add\"\r\n    ```\r\n\r\n1. 查询A列和B列和大于等于10的行\r\n    ```sql\r\n    select * from \"add\" where \"A\"+\"B\" >= 10\r\n    ```\r\n#### 减法运算\r\n1.\r\n    ```sql\r\n    select 1-\"A\" from \"sub\"\r\n    ```\r\n1.\r\n    ```sql\r\n    select * from \"sub\" where 1-\"A\" <= 3\r\n    ```\r\n1.\r\n    ```sql\r\n    select \"A\" - \"B\" from \"sub\"\r\n    ```\r\n1.\r\n    ```sql\r\n    select * from \"sub\" where \"A\" - B <= 1\r\n    ```\r\n#### 乘法和除法与上面用法相同\r\n#### 混合运算\r\n\r\n```sql\r\nselect 10 / (\"A\" + \"B\" + \"C\") from \"mult\"\r\n```\r\n\r\n#### 与函数混合运算\r\n> 只能在select子句中使用\r\n\r\n```sql\r\nselect 10 * mean(“value”) from ”cpu“\r\n```\r\n错误的写法, 会报语法错误\r\n```sql\r\nselect mean(10 * “value”) from ”cpu“\r\n```\r\n\r\n不支持的运算符\r\n\r\n- 比较运算符\r\n    `=`,`!=`,`<`,`>`,`<=`,`>=`,`<>`\r\n- 逻辑运算符\r\n    `&`,`|`,`!|`,`NAND`,`XOR`,`NOR`\r\n- 其它\r\n    `%`, `^`\r\n\r\n### 函数\r\n\r\n- 聚合函数\r\n    - count()\r\n    - distinct()\r\n    - integral() ×\r\n    - mean() 平均值\r\n    - median() 中值\r\n    - mode() 返回出现频率最高的值\r\n    - spread() 最大值与最小值的差\r\n    - stddev() 标准差\r\n    - sum()\r\n- 选择函数\r\n    - bottom() 返回最小的N个值\r\n    - first() 返回时间戳最小（最老）的一个field值\r\n    - last() 返回时间戳最大（最新）的一个field值\r\n    - max() 最大值\r\n    - min() 最小值\r\n    - percentile()\r\n    - sample() 随机选N个field值返回\r\n    - top() 返回最大的N个值\r\n- 转换函数\r\n    - ceiling()\r\n    - cumulative_sum()\r\n    - derivative()\r\n    - difference()\r\n    - elapsed()\r\n    - floor()\r\n    - histogram()\r\n    - moving_average()\r\n    - non_negtive_derivative()\r\n- 预测函数\r\n    - holt_winters()\r\n\r\n用法见[官方文档](https://docs.influxdata.com/influxdb/v1.2/query_language/functions/)\r\n\r\n### 数据类型转换\r\n语法：\r\n```sql\r\nSELECT_clause <field_key>::<type> FROM_clause\r\n```\r\n支持的类型：float, integer, string, boolean\r\n\r\n### 正则表达式\r\n支持该语法的位置：\r\n- select子句中的field keys和tag keys\r\n    ```sql\r\n    select /^bandwidth.*/ from \"bandwidth-data\"\r\n    ```\r\n- 表名称\r\n    ```sql\r\n    select * from /bandwidth\\-data\\-\\d+/\r\n    ```\r\n- where子句中的 tag值以及字符串类型的field值\r\n    查询匹配项\r\n    ```sql\r\n    select * from \"bandwidth-data\" where stag =~ /\\w+/\r\n    ```\r\n    查询不匹配项\r\n    ```sql\r\n    select * from \"bandwidth-data\" where stag !~ /\\w+/\r\n    ```\r\n- group by 子句中的 tag值\r\n    ```sql\r\n    select * from \"bandwidth-data\" group by /^tag_.*/\r\n    ```\r\n\r\n## 更新\r\n不支持直接更新，可以使用insert 语句设置相同的时间戳和tag值来更新field value\r\n\r\n## 删除\r\n不支持使用语句直接删除数据，只能通过数据保留策略清理数据， 参考文档（[数据保留策略.md](?file=003-数据库/003-InfluxDB/002-基本操作/003-数据保留策略 \"数据保留策略\")）；","timestamp":1524798865268},{"name":"002-数据库管理.md","path":"003-数据库/003-InfluxDB/002-基本操作/002-数据库管理.md","content":"# 数据库管理\r\n\r\n## 数据库\r\n\r\n### 创建数据库\r\n\r\n```sql\r\ncreate database \"NOAA_water_database\"\r\n```\r\n\r\n创建数据库的同时创建一个默认数据保留策略\r\n```sql\r\nCREATE DATABASE \"NOAA_water_database\" WITH DURATION 3d REPLICATION 1 SHARD DURATION 1h NAME \"liquid\"\r\n```\r\n\r\n### 删除数据库\r\n```sql\r\ndrop database \"NOAA_water_database\"\r\n```\r\n\r\n## 表\r\n\r\n### 创建表\r\n插入数据即创建表\r\n\r\n```sql\r\ninsert census,butterflies=12,honeybees=23 location=1,scientist=langstroth\r\n```\r\n\r\n### 删除表\r\n\r\n```sql\r\ndrop measurement \"census\" on \"NOAA_water_database\"\r\n```\r\n> 删除表不支持正则\r\n\r\n## 序列\r\n\r\n### Drop删除\r\n删除数据的同时删除索引，where子句不可以使用时间做条件\r\n```sql\r\nDROP SERIES FROM <measurement_name[,measurement_name]> WHERE <tag_key>=\'<tag_value>\'\r\n```\r\n### delete删除\r\n删除数据， 但不删除索引， where子句可以用时间做条件\r\n```sql\r\nDELETE FROM <measurement_name> WHERE [<tag_key>=\'<tag_value>\'] | [<time interval>]\r\n```\r\n","timestamp":1524798865268},{"name":"003-数据保留策略.md","path":"003-数据库/003-InfluxDB/002-基本操作/003-数据保留策略.md","content":"# 数据保留策略\r\n\r\n## 介绍\r\nInfluxDB的数据保留策略是用来定义数据存放的时间，或者定义保存某个起见的数据。\r\n一个数据库可以有多个保留策略， 新版本中，默认保留策略名为`autogen`,\r\n默认保留策略可以在创建数据库时指定，参见[数据库管理](?file=003-数据库/003-InfluxDB/002-基本操作/002-数据库管理 \"数据库管理\")文档。\r\n\r\n## 操作\r\n\r\n### 查看数据库的现有策略\r\n```shell\r\n> show retention policies on \"database name\"\r\nname    duration shardGroupDuration replicaN default\r\n----    -------- ------------------ -------- -------\r\nautogen 0s       168h0m0s           1        true\r\n```\r\n\r\n可以看出这个数据库只有一个策略， 各个字段含义如下：\r\n- name: 名称， autogen\r\n- duration 数据保留时间， 0代表无限制\r\n- shardGroupDuration shardGroup的存储时间范围，shardGroup是InfluxDB的一个基本存储结构，大于这个时间的数据在查询效率上应该有所降低\r\n- replicaN replication , 副本个数\r\n- default 是否默认策略\r\n\r\n\r\n### 新建策略\r\n\r\n语法\r\n```sql\r\nCREATE RETENTION POLICY <retention_policy_name> ON <database_name> DURATION <duration> REPLICATION <n> [SHARD DURATION <duration>] [DEFAULT]\r\n```\r\n\r\n语法解释：\r\n\r\n- DURATION\r\n    指定数据保留时长， 最大为`INF`，最小为1h, 0s也表示无限\r\n- REPLICATION\r\n    指定每行数据在多个集群中存储多少个独立副本，n是副本数量\r\n- SHARD DURATION\r\n    指定每个shardGroup存储时间范围，最大为`INF`, 不写的情况下默认为DURATION的值\r\n- DEFAULT\r\n    指定为默认策略\r\n\r\n### 修改策略\r\n\r\n语法：\r\n```sql\r\nALTER RETENTION POLICY <retention_policy_name> ON <database_name> DURATION <duration> REPLICATION <n> SHARD DURATION <duration> DEFAULT\r\n```\r\n### 删除策略\r\n```sql\r\nDROP RETENTION POLICY <retention_policy_name> ON <database_name>\r\n```\r\n","timestamp":1524798865268},{"name":"004-连续查询.md","path":"003-数据库/003-InfluxDB/002-基本操作/004-连续查询.md","content":"# 连续查询\r\n\r\n\r\n## 介绍\r\n<!-- 连续查询是一种能在数据更新时自动运行并将查询结果插入到指定的表中的InfluxQL查询语句， -->\r\nInfluxDB的连续查询是在数据库中自动定时启动的一组语句，语句中必须包含select, group by time() 关键词，\r\n其主要用于数据归档，以降低精度为代价降低系统空间的占用率。\r\n使用连续查询是最优的降低采样率的方式，连续查询和存储策略搭配使用将会大大降低InfluxDB的系统占用量。\r\n而且使用连续查询后，数据会存放到指定的数据表中，这样就为以后统计不同精度的数据提供了方便。\r\n\r\n### 运行时机\r\n<!--\r\nCQs operate on realtime data. They use the local server’s timestamp, the GROUP BY time() interval, and InfluxDB’s preset time boundaries to determine when to execute and what time range to cover in the query. -->\r\n\r\n连续查询对实时数据进行操作。它使用本地服务器的时间戳，group by time()子句的事件间隔 以及InfluxBD预设的时间边界来决定何时执行以及在查询中覆盖的时间范围。\r\n在连续查询的where子句中使用时间条件会被直接忽略掉。\r\n\r\n## 语法\r\n\r\n### 新建连续查询\r\n\r\n```sql\r\nCREATE CONTINUOUS QUERY <cq_name> ON <database_name>\r\nBEGIN\r\n  <cq_query>\r\nEND\r\n```\r\n\r\n#### 查询部分： cq_query\r\ncq_query由函数、into子句以及Group by 子句组合， 结构如下：\r\n```sql\r\nSELECT <function[s]> INTO <destination_measurement> FROM <measurement> [WHERE <stuff>] GROUP BY time(<interval>)[,<tag_key[s]>]\r\n```\r\n\r\n#### 使用示例\r\n统计每个域名每小时的流量总和， 并将结果存入cdn_monitor_flow_1h表中\r\n```sql\r\nselect sum(EDGE_FLOW) AS EDGE_FLOW into cdn_monitor_flow_1h from cdn_monitor_slave group by time(1h),* fill(-1)\r\n```\r\n","timestamp":1524798865268},{"name":"005-用户管理.md","path":"003-数据库/003-InfluxDB/002-基本操作/005-用户管理.md","content":"# InfluxDB 用户管理\r\n\r\n## 管理员用户管理\r\n\r\n### 开启权限\r\ninfluxdb.conf文件\r\n```config\r\n[http]\r\n  # Determines whether HTTP endpoint is enabled.\r\n  # enabled = true\r\n\r\n  # The bind address used by the HTTP service.\r\n  # bind-address = \":8086\"\r\n\r\n  # Determines whether HTTP authentication is enabled.\r\n  auth-enabled = true\r\n\r\n  # The default realm sent back when issuing a basic auth challenge.\r\n  # realm = \"InfluxDB\"\r\n\r\n  # Determines whether HTTP request logging is enable.d\r\n  # log-enabled = true\r\n\r\n  # Determines whether detailed write logging is enabled.\r\n  # write-tracing = false\r\n```\r\nauth-enabled配置成true\r\n\r\n### 创建管理员账号\r\n```sql\r\ncreate user <username> with password <password> with all privileges;\r\n```\r\n\r\n### 授权\r\n```sql\r\ngrant all privileges to <username>\r\n```\r\n\r\n### 撤权\r\n```sql\r\nrevoke all privileges from <username>\r\n```\r\n### 查看所有用户\r\n```sql\r\nshow users;\r\n```\r\n## 非管理员用户管理：\r\n\r\n### 创建\r\n```sql\r\ncreate user <username> with password \'<password>\'\r\n```\r\n\r\n### 授权\r\n\r\n授予读、写或所有数据库权限\r\n```sql\r\ngrant [read, write, all] on ,database_name. to <username>\r\n```\r\n### 撤权\r\n```sql\r\nrevoke [read, write, all] on <database_name> from <username>\r\n```\r\n\r\n### 查看用户权限\r\n```sql\r\nshow grants for <username>\r\n```\r\n\r\n### 更新用户密码\r\n```shell\r\nset password for <username> = \'<new_password>\'\r\n```\r\n### 删除用户\r\n```sql\r\ndrop user <username>\r\n```\r\n\r\n\r\n> 非管理员用户客户端不能通过use database来使用时数据库","timestamp":1524798865268},{"name":"001-集群.md","path":"003-数据库/003-InfluxDB/003-高可用性/001-集群.md","content":"# 集群\r\n\r\n<!-- InfluxDB从0.9.3开始支持任意大小的集群无需完全复制，新的数据节点可以加入到集群中， -->","timestamp":1524798865268}]