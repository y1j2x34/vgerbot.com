if(typeof AWPageMounts=='undefined'){AWPageMounts={}};AWPageMounts['m009']=[{"name":"001-灰度算法收集.md","path":"009-数字图像处理/009-其它/001-灰度算法收集.md","content":"# 灰度算法\r\n\r\n### 平均法\r\n\r\n#### 公式：\r\n```js\r\nGray = (R + G + B) / 3\r\n```\r\n#### 优点：\r\n公式简单\r\n#### 缺点：\r\n从人眼感知角度看，图片的灰度阴影和亮度方面的效果较差\r\n\r\n### 基于人眼感知\r\n\r\n#### 公式1：\r\n```js\r\nGray = (R * 0.3 + G * 0.59 + B * 0.11)\r\n```\r\n#### 公式2：\r\n```js\r\nGray = (R * 0.2126 + G * 0.7152 + B * 0.0722)\r\n```\r\n#### 公式3：\r\n```js\r\nGray = (R * 0.299 + G * 0.587 + B * 0.114)\r\n```\r\n==\r\n最佳公式还存在争议。。。\r\n\r\n#### 算法优化（对公式3）\r\n\r\n```js\r\n0.299 * 65536 = 19595.264 ≈ 19595\r\n0.587 * 65536 + (0.264) = 38469.632 + 0.264 = 38469.896 ≈ 38469\r\n0.114 * 65536 + (0.896) =   7471.104 + 0.896 = 7472\r\nGray =  (R*19595 + G*38469 + B*7472) >> 16\r\n```\r\n2至20位精度的系数：\r\n\r\n```js\r\nGray = (R*1 + G*2 + B*1) >> 2\r\nGray = (R*2 + G*5 + B*1) >> 3\r\nGray = (R*4 + G*10 + B*2) >> 4\r\nGray = (R*9 + G*19 + B*4) >> 5\r\nGray = (R*19 + G*37 + B*8) >> 6\r\nGray = (R*38 + G*75 + B*15) >> 7\r\nGray = (R*76 + G*150 + B*30) >> 8\r\nGray = (R*153 + G*300 + B*59) >> 9\r\nGray = (R*306 + G*601 + B*117) >> 10\r\nGray = (R*612 + G*1202 + B*234) >> 11\r\nGray = (R*1224 + G*2405 + B*467) >> 12\r\nGray = (R*2449 + G*4809 + B*934) >> 13\r\nGray = (R*4898 + G*9618 + B*1868) >> 14\r\nGray = (R*9797 + G*19235 + B*3736) >> 15\r\nGray = (R*19595 + G*38469 + B*7472) >> 16\r\nGray = (R*39190 + G*76939 + B*14943) >> 17\r\nGray = (R*78381 + G*153878 + B*29885) >> 18\r\nGray = (R*156762 + G*307757 + B*59769) >> 19\r\nGray = (R*313524 + G*615514 + B*119538) >> 20\r\n```\r\n\r\n### 去饱和\r\n就是把RGB转换为HSL，饱和度设为0。\r\n\r\n#### 公式：\r\n```js\r\nGray = (Math.max(R, G, B) + Math.min(R, G, B)) / 2\r\n```\r\n去饱和后，图片立体感减弱，但更柔和。\r\n\r\n### 分解\r\n\r\n取最大值或者最小值。\r\n\r\n#### 最大值分解\r\n\r\n```js\r\nGray = Math.max(R, G, B)\r\n```\r\n\r\n#### 最小值分解\r\n\r\n```js\r\nGray = Math.min(R, G, B)\r\n```\r\n\r\n最大值分解生成更明亮的图，最小值分解生成更黑暗的图\r\n\r\n### 单一通道\r\n\r\n```js\r\nGray = R\r\n// or\r\nGray = G\r\n// or\r\nGray = B\r\n```\r\n大多数数码相机用这种算法生成灰度图\r\n\r\n### 自定义灰度阴影\r\n\r\n由用户提供灰色阴影值(numberOfShades)，范围为[2, 256], 2的结果是一张全白的值，256的结果和平均值法的效果一样\r\n\r\n#### 公式\r\n```js\r\nConversionFactor = 255 / (numberOfShades - 1)\r\nAverageValue = (R + G + B) / 3\r\nGray = Math.round(AverageValue / ConversionFactor + 0.5) + ConversionFactor\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","timestamp":1524798865268},{"name":"002-相似图片搜索原理.md","path":"009-数字图像处理/009-其它/002-相似图片搜索原理.md","content":"# 相似图片搜索原理\r\n\r\n## 感知hash算法\r\n对每张图片生成一个hash，然后比较不同图片的指纹，指纹越接近，说明图片越相似。\r\n\r\n### 汉明距离\r\n两个等长字符串之间对应位置不同字符的个数，或将一个字符串变成另外一个等长字符串所需要替换的字符个数。\r\n\r\n### 实现过程\r\n1. 缩小尺寸\r\n将图片缩小到8*8的尺寸，得到64个像素的小图，这一步的作用是去除图片细节，只保留结构、明暗等基本信息，摈弃不同尺寸，比例带来的图片差异。\r\n1. 简化色彩\r\n转化为64级灰度，也就是所有像素点总共64种颜色\r\n1. 计算平均值\r\n计算64个像素的灰度平均值\r\n1. 二值化\r\n每个像素灰度与平均值比较， 大于或等于平均值记为1，否则记为0\r\n1. 计算hash值\r\n将二值化的结果组合一起，得到64位整数，这就是这张图片的指纹，要保证所有图片都采用同样的组合次序。\r\n1. 对比指纹\r\n计算两个指纹的汉明距离，如果不相同的数据位不超过5，说明很相似，如果大于10，说明是两张不同的图片\r\n\r\n算法的优点是简单快速，不受图片大小缩放影响，缺点是图片的内容不能变更，如果在图片上加几个文字，就可能认不出来了。所以它的最佳用途是根据缩略图找出原图。\r\n\r\n### 代码\r\n\r\n[imageHash.js](./amWiki/snippets/imageHash.js)\r\n\r\n\r\n## 颜色分步法\r\n每张图片都可以生成颜色分步直方图，如果两张图片的直方图很接近，就可以认为他们很相似。\r\n\r\n### 颜色直方图\r\n（Color Histogram），指图像中颜色分步的图形表示，颜色直方图覆盖图像的整个色彩空间，标会各个颜色区间中的像素数\r\n\r\n### 余弦相似度\r\n用向量空间中两个向量夹角的余弦值作为衡量两个个体间差异大小的度量\r\n设：\r\n\r\n向量$X = (x_1, x_2, ..., x_n)$\r\n\r\n向量 $Y = (y_1, y_2, ..., y_n)$\r\n\r\n余弦相似度：\r\n$sim(X, Y) = cos(\\theta) = \\frac{x_1y_1 + x_2y_2 + ... + x_ny_n}{\\sqrt{x_1^2+x_2^2 + ... + x_n^2} + \\sqrt{y_1^2+y_2^2 + ... + y_n^2}} $\r\n\r\n\r\n当X，Y向量夹角余弦等于1时，X,Y相等，接近于1时，X,Y相似；夹角越小，两个向量越不相似\r\n\r\n\r\n### 实现过程\r\n1. 对0~255分区\r\n    每种原色都可以取256个值，那么整个颜色空间共有`256^3`种颜色，如果对每种颜色比较直方图，计算量太大，因此要采用分区的简化方法， 可以将0~255分成4个区\r\n    （0区：0~63，1区：64~127，2区：127~191， 3区：192~255）,红绿蓝三原色总共可以构成64种组合\r\n1. 统计每一种组合包含的像素数量\r\n1. 将每种组合的像素数量组成64维向量，这个向量就是这张图片的特征值或者叫“指纹”\r\n1. 计算两张图片的指纹相似度， 也就是计算两个向量的相似度\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","timestamp":1524798865268}]